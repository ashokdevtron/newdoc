"use strict";(self.webpackChunknewdoc=self.webpackChunknewdoc||[]).push([[775],{2806:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var i=t(4848),l=t(8453);const s={},r="Create Your Plugin",a={id:"plugins/create-plugin",title:"Create Your Plugin",description:"Introduction",source:"@site/docs/plugins/create-plugin.md",sourceDirName:"plugins",slug:"/plugins/create-plugin",permalink:"/newdoc/docs/plugins/create-plugin",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"pluginSidebar",next:{title:"SonarQube",permalink:"/newdoc/docs/plugins/sonarqube"}},d={},c=[{value:"Introduction",id:"introduction",level:2},{value:"API Call",id:"api-call",level:2},{value:"Example Plugin",id:"example-plugin",level:2},{value:"Sample Request Body",id:"sample-request-body",level:3},{value:"Result",id:"result",level:3},{value:"Other API calls",id:"other-api-calls",level:2},{value:"Field Definitions",id:"field-definitions",level:2}];function o(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",hr:"hr",img:"img",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"create-your-plugin",children:"Create Your Plugin"}),"\n",(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsx)(n.p,{children:"You can create CI/CD plugins using APIs. It can be any of the following: CI plugin or CD plugin."}),"\n",(0,i.jsx)(n.p,{children:"Your plugin can be a single-step or multi-step plugin, where steps can be considered as tasks. The task can either be simple shell commands or it can be complex operations that require a specific container environment."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"api-call",children:"API Call"}),"\n",(0,i.jsx)(n.admonition,{title:"Prerequisite",type:"caution",children:(0,i.jsx)(n.p,{children:"You will need a token to make API calls"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-http",children:"POST {{DEVTRON_BASEURL}}/orchestrator/plugin/global\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"example-plugin",children:"Example Plugin"}),"\n",(0,i.jsxs)(n.p,{children:["In the following example, we are creating a single-step plugin named ",(0,i.jsx)(n.strong,{children:"Secret Management Validator"}),". Moreover, we want to execute a simple shell script; therefore, we are keeping the task type as ",(0,i.jsx)(n.code,{children:"SHELL"})]}),"\n",(0,i.jsx)(n.h3,{id:"sample-request-body",children:"Sample Request Body"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n    "name": "Secret Management Validator",\n    "description": "The Secret Management Validator plugin integrates with your CI/CD pipeline to automatically detect and prevent the inclusion of secrets or sensitive information in your codebase, ensuring compliance and security.",\n    "type": "SHARED",\n    "icon": "https://devtron-public-asset.s3.us-east-2.amazonaws.com/images/vectors/secret-management-validator.png",\n    "tags": ["security", "compliance", "secrets"],\n    "action": 0,\n    "pluginStage": "CI_CD",\n    "pluginSteps": [\n        {\n            "name": "Step 1",\n            "description": "Step 1 - Secret Management Validator",\n            "index": 1,\n            "stepType": "INLINE",\n            "refPluginId": 0,\n            "outputDirectoryPath": null,\n            "dependentOnStep": "",\n            "pluginStepVariable": [\n                {\n                    "name": "PathToScan",\n                    "format": "STRING",\n                    "description": "The relative path to the directory or file that needs to be scanned for secrets.",\n                    "isExposed": true,\n                    "allowEmptyValue": true,\n                    "defaultValue": "",\n                    "variableType": "INPUT",\n                    "valueType": "NEW",\n                    "variableStepIndex": 1,\n                    "variableStepIndexInPlugin": 0\n                },\n                {\n                    "name": "GitGuardianApiKey",\n                    "format": "STRING",\n                    "description": "The API key for GitGuardian to authenticate and use the secret detection service.",\n                    "isExposed": true,\n                    "allowEmptyValue": false,\n                    "defaultValue": "",\n                    "variableType": "INPUT",\n                    "valueType": "NEW",\n                    "variableStepIndex": 1,\n                    "variableStepIndexInPlugin": 0\n                },\n                {\n                    "name": "ScanScope",\n                    "format": "STRING",\n                    "description": "Defines the scope of the scan. It can be set to scan all files, specific file types, or based on patterns.",\n                    "isExposed": true,\n                    "allowEmptyValue": true,\n                    "defaultValue": "all",\n                    "variableType": "INPUT",\n                    "valueType": "NEW",\n                    "variableStepIndex": 1,\n                    "variableStepIndexInPlugin": 0\n                },\n                {\n                    "name": "OutputFormat",\n                    "format": "STRING",\n                    "description": "The desired format for the output report, such as JSON, HTML, or plaintext.",\n                    "isExposed": true,\n                    "allowEmptyValue": true,\n                    "defaultValue": "JSON",\n                    "variableType": "INPUT",\n                    "valueType": "NEW",\n                    "variableStepIndex": 1,\n                    "variableStepIndexInPlugin": 0\n                }\n            ],\n            "pluginPipelineScript": {\n                "script": "\\n# Run GitGuardian secret detection\\nif [ -n \\"$GITGUARDIAN_API_KEY\\" ]; then\\n echo \\"Running GitGuardian Secret Detection...\\"\\n ggshield scan path $SCAN_PATH --api-key $GITGUARDIAN_API_KEY\\nelse\\n echo \\"GitGuardian API key is missing. Skipping secret detection.\\"\\nfi\\n\\n# Output the results\\nif [ -f ggshield-output.json ]; then\\n cat ggshield-output.json\\nelse\\n echo \\"No GitGuardian output found.\\"\\nfi",\n                "storeScriptAt": "",\n                "type": "SHELL"\n            }\n        }\n    ]\n}\n\n'})}),"\n",(0,i.jsx)(n.p,{children:"Required fields to edit in the above sample payload are:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Key Path"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"name"}),(0,i.jsx)(n.td,{children:"Plugin name"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"description"}),(0,i.jsx)(n.td,{children:"Plugin description"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"tags"}),(0,i.jsx)(n.td,{children:"Array of tags"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"icon"}),(0,i.jsx)(n.td,{children:"Plugin icon url"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Plugin steps"}),(0,i.jsx)(n.td,{children:"Array of tasks to execute (Details of fields discussed below)"})]})]})]}),"\n",(0,i.jsx)(n.p,{children:"Fields of a plugin steps are:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Key Path"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"name"}),(0,i.jsx)(n.td,{children:"Step name"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"description"}),(0,i.jsx)(n.td,{children:"Description of step"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"index"}),(0,i.jsx)(n.td,{children:"Sequence at which the step needs to executed"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"outputDirectoryPath"}),(0,i.jsx)(n.td,{children:"Artifact output path"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"pluginStepVariable"}),(0,i.jsx)(n.td,{children:"Array of required input / output variables"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"pluginPipelineScript.script"}),(0,i.jsx)(n.td,{children:"Stringified bash script"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"result",children:"Result"}),"\n",(0,i.jsxs)(n.p,{children:["Your new plugin will appear under ",(0,i.jsx)(n.strong,{children:"Shared Plugins"})," depending on which stage you have created it for: pre/post build (",(0,i.jsx)(n.code,{children:"pluginStage = CI"}),"), pre/post deployment (",(0,i.jsx)(n.code,{children:"pluginStage = CD"}),"), or both (",(0,i.jsx)(n.code,{children:"pluginStage = CI_CD"}),")"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://devtron-public-asset.s3.us-east-2.amazonaws.com/images/plugins/create-plugin/shared-plugin.jpg",alt:"New Shared Plugin"})}),"\n",(0,i.jsxs)(n.p,{children:["The variables defined in the ",(0,i.jsx)(n.code,{children:"pluginStepVariable"})," array would appear as shown below."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://devtron-public-asset.s3.us-east-2.amazonaws.com/images/plugins/create-plugin/plugin-fields.jpg",alt:"Plugin Fields"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"other-api-calls",children:"Other API calls"}),"\n",(0,i.jsx)(n.p,{children:"To fetch details of a specific plugin by its ID"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-http",children:"GET \n/orchestrator/plugin/global/detail/{pluginId}\n"})}),"\n",(0,i.jsx)(n.p,{children:"To fetch details of all plugins"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-http",children:"GET\n/orchestrator/plugin/global/detail/all\n"})}),"\n",(0,i.jsx)(n.p,{children:"To fetch list of all global variables"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-http",children:"GET\n/orchestrator/plugin/global/list/global-variable\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"field-definitions",children:"Field Definitions"}),"\n",(0,i.jsxs)(n.p,{children:["Refer the ",(0,i.jsx)(n.a,{href:"https://github.com/devtron-labs/devtron/blob/main/specs/global-plugin.yaml",children:"spec file"})," for detailed definition of each field present in the request/response body of the API."]})]})}function p(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var i=t(6540);const l={},s=i.createContext(l);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);