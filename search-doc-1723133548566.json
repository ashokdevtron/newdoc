{"searchDocs":[{"title":"MDX Blog Post","type":0,"sectionRef":"#","url":"/newdoc/blog/mdx-blog-post","content":"Blog posts support Docusaurus Markdown features, such as MDX. tip Use the power of React to create interactive blog posts. &lt;button onClick={() =&gt; alert('button clicked!')}&gt;Click me!&lt;/button&gt; Click me!","keywords":"","version":null},{"title":"First Blog Post","type":0,"sectionRef":"#","url":"/newdoc/blog/first-blog-post","content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet","keywords":"","version":null},{"title":"Long Blog Post","type":0,"sectionRef":"#","url":"/newdoc/blog/long-blog-post","content":"This is the summary of a very long blog post, Use a &lt;!-- truncate --&gt; comment to limit blog post size in the list view. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet","keywords":"","version":null},{"title":"SonarQube","type":0,"sectionRef":"#","url":"/newdoc/docs/plugins/sonarqube","content":"SonarQube Configuring Sonarqube in pre-build or post build task enhances your workflow with Continuous Code Quality &amp; Code Security. Prerequisite Make sure you have set up an account in Sonarqube or get the API keys from an admin. On the Edit build pipeline page, select the Pre-Build Stage (or Post-Build Stage). Click + Add task. Select Sonarqube from PRESET PLUGINS. Enter a relevant name in the Task name field. It is a mandatory field.Enter a descriptive message for the task in the Description field. It is an optional field.Provide a value for the input variable. Note: The value may be any of the values from the previous build stages, a global variable, or a custom value. Variable\tFormat\tDescriptionSonarqubeProjectKey\tString\tProject key of SonarQube account SonarqubeApiKey\tString\tAPI key of SonarQube account SonarqubeEndpoint\tString\tAPI endpoint of SonarQube account CheckoutPath\tString\tCheckout path of Git material UsePropertiesFileFromProject\tBoolean\tEnter either true or false accordingly whether the configuration file should be fetched from the project's source code CheckForSonarAnalysisReport\tBoolean\tEnter either true or false accordingly whether you want poll or actively check for the generation of the SonarQube analysis report AbortPipelineOnPolicyCheckFailed\tBoolean\tEnter either true or false accordingly whether you want to check if the policy fails or not Trigger/Skip Condition refers to a conditional statement to execute or skip the task. You can select either: Set trigger conditions orSet skip conditions Click Update Pipeline.","keywords":"","version":"Next"},{"title":"Pipeline Plugins","type":0,"sectionRef":"#","url":"/newdoc/docs/plugins/","content":"Pipeline Plugins Pipeline plugins (a.k.a. preset plugins) are micro tools that allow you to enhance and refine the CI/CD workflow of your application by adding new features, integrating with external tools, and automating tasks. Unlike custom scripts, preset plugins come bundled with specific variables and conditions that help you make the plugins work seamlessly with your CI/CD pipeline. Some plugins are meant for pre-build/post-build, while some are meant for pre-deployment/post-deployment. From this section, you can know more about the individual plugins and its purpose.","keywords":"","version":"Next"},{"title":"Create Your Plugin","type":0,"sectionRef":"#","url":"/newdoc/docs/plugins/create-plugin","content":"","keywords":"","version":"Next"},{"title":"Introduction​","type":1,"pageTitle":"Create Your Plugin","url":"/newdoc/docs/plugins/create-plugin#introduction","content":" You can create CI/CD plugins using APIs. It can be any of the following: CI plugin or CD plugin.  Your plugin can be a single-step or multi-step plugin, where steps can be considered as tasks. The task can either be simple shell commands or it can be complex operations that require a specific container environment.    ","version":"Next","tagName":"h2"},{"title":"API Call​","type":1,"pageTitle":"Create Your Plugin","url":"/newdoc/docs/plugins/create-plugin#api-call","content":" Prerequisite You will need a token to make API calls  POST {{DEVTRON_BASEURL}}/orchestrator/plugin/global     ","version":"Next","tagName":"h2"},{"title":"Example Plugin​","type":1,"pageTitle":"Create Your Plugin","url":"/newdoc/docs/plugins/create-plugin#example-plugin","content":" In the following example, we are creating a single-step plugin named Secret Management Validator. Moreover, we want to execute a simple shell script; therefore, we are keeping the task type as SHELL  ","version":"Next","tagName":"h2"},{"title":"Sample Request Body​","type":1,"pageTitle":"Create Your Plugin","url":"/newdoc/docs/plugins/create-plugin#sample-request-body","content":" { &quot;name&quot;: &quot;Secret Management Validator&quot;, &quot;description&quot;: &quot;The Secret Management Validator plugin integrates with your CI/CD pipeline to automatically detect and prevent the inclusion of secrets or sensitive information in your codebase, ensuring compliance and security.&quot;, &quot;type&quot;: &quot;SHARED&quot;, &quot;icon&quot;: &quot;https://devtron-public-asset.s3.us-east-2.amazonaws.com/images/vectors/secret-management-validator.png&quot;, &quot;tags&quot;: [&quot;security&quot;, &quot;compliance&quot;, &quot;secrets&quot;], &quot;action&quot;: 0, &quot;pluginStage&quot;: &quot;CI_CD&quot;, &quot;pluginSteps&quot;: [ { &quot;name&quot;: &quot;Step 1&quot;, &quot;description&quot;: &quot;Step 1 - Secret Management Validator&quot;, &quot;index&quot;: 1, &quot;stepType&quot;: &quot;INLINE&quot;, &quot;refPluginId&quot;: 0, &quot;outputDirectoryPath&quot;: null, &quot;dependentOnStep&quot;: &quot;&quot;, &quot;pluginStepVariable&quot;: [ { &quot;name&quot;: &quot;PathToScan&quot;, &quot;format&quot;: &quot;STRING&quot;, &quot;description&quot;: &quot;The relative path to the directory or file that needs to be scanned for secrets.&quot;, &quot;isExposed&quot;: true, &quot;allowEmptyValue&quot;: true, &quot;defaultValue&quot;: &quot;&quot;, &quot;variableType&quot;: &quot;INPUT&quot;, &quot;valueType&quot;: &quot;NEW&quot;, &quot;variableStepIndex&quot;: 1, &quot;variableStepIndexInPlugin&quot;: 0 }, { &quot;name&quot;: &quot;GitGuardianApiKey&quot;, &quot;format&quot;: &quot;STRING&quot;, &quot;description&quot;: &quot;The API key for GitGuardian to authenticate and use the secret detection service.&quot;, &quot;isExposed&quot;: true, &quot;allowEmptyValue&quot;: false, &quot;defaultValue&quot;: &quot;&quot;, &quot;variableType&quot;: &quot;INPUT&quot;, &quot;valueType&quot;: &quot;NEW&quot;, &quot;variableStepIndex&quot;: 1, &quot;variableStepIndexInPlugin&quot;: 0 }, { &quot;name&quot;: &quot;ScanScope&quot;, &quot;format&quot;: &quot;STRING&quot;, &quot;description&quot;: &quot;Defines the scope of the scan. It can be set to scan all files, specific file types, or based on patterns.&quot;, &quot;isExposed&quot;: true, &quot;allowEmptyValue&quot;: true, &quot;defaultValue&quot;: &quot;all&quot;, &quot;variableType&quot;: &quot;INPUT&quot;, &quot;valueType&quot;: &quot;NEW&quot;, &quot;variableStepIndex&quot;: 1, &quot;variableStepIndexInPlugin&quot;: 0 }, { &quot;name&quot;: &quot;OutputFormat&quot;, &quot;format&quot;: &quot;STRING&quot;, &quot;description&quot;: &quot;The desired format for the output report, such as JSON, HTML, or plaintext.&quot;, &quot;isExposed&quot;: true, &quot;allowEmptyValue&quot;: true, &quot;defaultValue&quot;: &quot;JSON&quot;, &quot;variableType&quot;: &quot;INPUT&quot;, &quot;valueType&quot;: &quot;NEW&quot;, &quot;variableStepIndex&quot;: 1, &quot;variableStepIndexInPlugin&quot;: 0 } ], &quot;pluginPipelineScript&quot;: { &quot;script&quot;: &quot;\\n# Run GitGuardian secret detection\\nif [ -n \\&quot;$GITGUARDIAN_API_KEY\\&quot; ]; then\\n echo \\&quot;Running GitGuardian Secret Detection...\\&quot;\\n ggshield scan path $SCAN_PATH --api-key $GITGUARDIAN_API_KEY\\nelse\\n echo \\&quot;GitGuardian API key is missing. Skipping secret detection.\\&quot;\\nfi\\n\\n# Output the results\\nif [ -f ggshield-output.json ]; then\\n cat ggshield-output.json\\nelse\\n echo \\&quot;No GitGuardian output found.\\&quot;\\nfi&quot;, &quot;storeScriptAt&quot;: &quot;&quot;, &quot;type&quot;: &quot;SHELL&quot; } } ] }   Required fields to edit in the above sample payload are:  Key Path\tDescriptionname\tPlugin name description\tPlugin description tags\tArray of tags icon\tPlugin icon url Plugin steps\tArray of tasks to execute (Details of fields discussed below)  Fields of a plugin steps are:  Key Path\tDescriptionname\tStep name description\tDescription of step index\tSequence at which the step needs to executed outputDirectoryPath\tArtifact output path pluginStepVariable\tArray of required input / output variables pluginPipelineScript.script\tStringified bash script  ","version":"Next","tagName":"h3"},{"title":"Result​","type":1,"pageTitle":"Create Your Plugin","url":"/newdoc/docs/plugins/create-plugin#result","content":" Your new plugin will appear under Shared Plugins depending on which stage you have created it for: pre/post build (pluginStage = CI), pre/post deployment (pluginStage = CD), or both (pluginStage = CI_CD)    The variables defined in the pluginStepVariable array would appear as shown below.      ","version":"Next","tagName":"h3"},{"title":"Other API calls​","type":1,"pageTitle":"Create Your Plugin","url":"/newdoc/docs/plugins/create-plugin#other-api-calls","content":" To fetch details of a specific plugin by its ID  GET /orchestrator/plugin/global/detail/{pluginId}   To fetch details of all plugins  GET /orchestrator/plugin/global/detail/all   To fetch list of all global variables  GET /orchestrator/plugin/global/list/global-variable     ","version":"Next","tagName":"h2"},{"title":"Field Definitions​","type":1,"pageTitle":"Create Your Plugin","url":"/newdoc/docs/plugins/create-plugin#field-definitions","content":" Refer the spec file for detailed definition of each field present in the request/response body of the API. ","version":"Next","tagName":"h2"},{"title":"Tutorial Intro","type":0,"sectionRef":"#","url":"/newdoc/docs/intro","content":"","keywords":"","version":"Next"},{"title":"Getting Started​","type":1,"pageTitle":"Tutorial Intro","url":"/newdoc/docs/intro#getting-started","content":" Get started by creating a new site.  Or try Docusaurus immediately with docusaurus.new.  ","version":"Next","tagName":"h2"},{"title":"What you'll need​","type":1,"pageTitle":"Tutorial Intro","url":"/newdoc/docs/intro#what-youll-need","content":" Node.js version 18.0 or above: When installing Node.js, you are recommended to check all checkboxes related to dependencies.  ","version":"Next","tagName":"h3"},{"title":"Generate a new site​","type":1,"pageTitle":"Tutorial Intro","url":"/newdoc/docs/intro#generate-a-new-site","content":" Generate a new Docusaurus site using the classic template.  The classic template will automatically be added to your project after you run the command:  npm init docusaurus@latest my-website classic   You can type this command into Command Prompt, Powershell, Terminal, or any other integrated terminal of your code editor.  The command also installs all necessary dependencies you need to run Docusaurus.  ","version":"Next","tagName":"h2"},{"title":"Start your site​","type":1,"pageTitle":"Tutorial Intro","url":"/newdoc/docs/intro#start-your-site","content":" Run the development server:  cd my-website npm run start   The cd command changes the directory you're working with. In order to work with your newly created Docusaurus site, you'll need to navigate the terminal there.  The npm run start command builds your website locally and serves it through a development server, ready for you to view at http://localhost:3000/.  Open docs/intro.md (this page) and edit some lines: the site reloads automatically and displays your changes. ","version":"Next","tagName":"h2"},{"title":"Welcome","type":0,"sectionRef":"#","url":"/newdoc/blog/welcome","content":"Docusaurus blogging features are powered by the blog plugin. Simply add Markdown files (or folders) to the blog directory. Regular blog authors can be added to authors.yml. The blog post date can be extracted from filenames, such as: 2019-05-30-welcome.md2019-05-30-welcome/index.md A blog post folder can be convenient to co-locate blog post images: The blog supports tags as well! And if you don't want a blog: just delete this directory, and use blog: false in your Docusaurus config.","keywords":"","version":null},{"title":"Sonarqube v1.1.0","type":0,"sectionRef":"#","url":"/newdoc/docs/plugins/sonarqube-v1.1.0","content":"Sonarqube v1.1.0 Configuring Sonarqube-v1.1.0 in pre-build or post build task enhances your workflow with Continuous Code Quality &amp; Code Security. Prerequisite Make sure you have set up an account in Sonarqube or get the API keys from an admin. On the Edit build pipeline page, select the Pre-Build Stage (or Post-Build Stage). Click + Add task. Select Sonarqube v1.1.0 from PRESET PLUGINS. Enter a relevant name in the Task name field. It is a mandatory field.Enter a descriptive message for the task in the Description field. It is an optional field.Provide a value for the input variable. Note: The value may be any of the values from the previous build stages, a global variable, or a custom value. Variable\tFormat\tDescriptionSonarqubeProjectPrefixName\tString\tThis is the SonarQube project prefix name. If not provided, the prefix name is automatically generated. SonarqubeBranchName\tString\tBranch name to be used to send the scanned result on sonarqube project. SonarqubeProjectKey\tString\tProject key of SonarQube account CheckForSonarAnalysisReport\tBool\tBoolean value - true or false. Set true to poll for generated report from sonarqube. AbortPipelineOnPolicyCheckFailed\tBool\tBoolean value - true or false. Set true to abort on report check failed. UsePropertiesFileFromProject\tBool\tBoolean value - true or false. Set true to use source code sonar-properties file. SonarqubeEndpoint\tString\tAPI endpoint of SonarQube account. CheckoutPath\tString\tCheckout path of Git material. SonarqubeApiKey\tString\tAPI key of SonarQube account SonarContainerImage\tString\tContainer Image that will be used for sonar scanning purpose. Trigger/Skip Condition refers to a conditional statement to execute or skip the task. You can select either: Set trigger conditions orSet skip conditions Pass/Fail Condition refers to a conditional statement to pass or fail the Pre-Build Stage (or Post-Build Stage). You can select either: Set pass conditions orSet failure conditions Click Update Pipeline.","keywords":"","version":"Next"},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/newdoc/docs/getting-started","content":"","keywords":"","version":"Next"},{"title":"Create a Kubernetes Cluster​","type":1,"pageTitle":"Getting Started","url":"/newdoc/docs/getting-started#create-a-kubernetes-cluster","content":" You can create any Kubernetes cluster (preferably K8s version 1.16 or higher) for installing Devtron.  You can create a cluster using one of the following cloud providers as per your requirements:  Cloud Provider\tDescriptionAWS EKS\tCreate a cluster using AWS EKS. Note: You can also refer our customized documentation for installing Devtron with CI/CD on AWS EKS here. Google Kubernetes Engine (GKE)\tCreate a cluster using GKE. Azure Kubernetes Service (AKS)\tCreate a cluster using AKS. k3s - Lightweight Kubernetes\tCreate a cluster using k3s - Lightweight Kubernetes. Note: You can also refer our customized documentation for installing Helm Dashboard by Devtron on Minikube, Microk8s, K3s, Kind here.  ","version":"Next","tagName":"h3"},{"title":"Install Helm​","type":1,"pageTitle":"Getting Started","url":"/newdoc/docs/getting-started#install-helm","content":" Make sure to install helm.  ","version":"Next","tagName":"h3"},{"title":"Recommended Resources​","type":1,"pageTitle":"Getting Started","url":"/newdoc/docs/getting-started#recommended-resources","content":" The minimum requirements for installing Helm Dashboard by Devtron and Devtron with CI/CD as per the number of applications you want to manage on Devtron are provided below:  For configuring small resources (to manage not more than 5 apps on Devtron):  Integration\tCPU\tMemoryDevtron with CI/CD\t2\t6 GB Helm Dashboard by Devtron\t1\t1 GB  For configuring medium/larger resources (to manage more than 5 apps on Devtron):  Integration\tCPU\tMemoryDevtron with CI/CD\t6\t13 GB Helm Dashboard by Devtron\t2\t3 GB  Refer to the Override Configurations section for more information.  tip Please make sure that the recommended resources are available on your Kubernetes cluster before you proceed with Devtron installation.  caution It is NOT recommended to use brustable CPU VMs (T series in AWS, B Series in Azure and E2/N1 in GCP) for Devtron installation to experience consistency in performance.  ","version":"Next","tagName":"h3"},{"title":"Installation of Devtron​","type":1,"pageTitle":"Getting Started","url":"/newdoc/docs/getting-started#installation-of-devtron","content":" You can install Devtron standalone (Helm Dashboard by Devtron) or along with CI/CD integration. Or, you can upgrade Devtron to the latest version.  Choose one of the options as per your requirements:  Installation Options\tDescriptionDevtron with CI/CD\tDevtron installation with the CI/CD integration is used to perform CI/CD, security scanning, GitOps, debugging, and observability. Helm Dashboard by Devtron\tThe Helm Dashboard by Devtron which is a standalone installation includes functionalities to deploy, observe, manage, and debug existing Helm applications in multiple clusters. You can also install integrations from Devtron Stack Manager. Devtron with CI/CD along with GitOps (Argo CD)\tWith this option, you can install Devtron with CI/CD by enabling GitOps during the installation. You can also install other integrations from Devtron Stack Manager. Upgrade Devtron to latest version\tYou can upgrade Devtron in one of the following ways: Upgrade Devtron using HelmUpgrade Devtron from UI  Need Help? If you have questions, please let us know on our discord channel.  ","version":"Next","tagName":"h2"}],"options":{"id":"default"}}